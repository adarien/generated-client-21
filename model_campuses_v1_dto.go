/*
School21 OpenAPI Specification

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CampusesV1DTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CampusesV1DTO{}

// CampusesV1DTO Campuses
type CampusesV1DTO struct {
	// Array of campus objects
	Campuses []CampusV1DTO `json:"campuses"`
}

type _CampusesV1DTO CampusesV1DTO

// NewCampusesV1DTO instantiates a new CampusesV1DTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCampusesV1DTO(campuses []CampusV1DTO) *CampusesV1DTO {
	this := CampusesV1DTO{}
	this.Campuses = campuses
	return &this
}

// NewCampusesV1DTOWithDefaults instantiates a new CampusesV1DTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCampusesV1DTOWithDefaults() *CampusesV1DTO {
	this := CampusesV1DTO{}
	return &this
}

// GetCampuses returns the Campuses field value
func (o *CampusesV1DTO) GetCampuses() []CampusV1DTO {
	if o == nil {
		var ret []CampusV1DTO
		return ret
	}

	return o.Campuses
}

// GetCampusesOk returns a tuple with the Campuses field value
// and a boolean to check if the value has been set.
func (o *CampusesV1DTO) GetCampusesOk() ([]CampusV1DTO, bool) {
	if o == nil {
		return nil, false
	}
	return o.Campuses, true
}

// SetCampuses sets field value
func (o *CampusesV1DTO) SetCampuses(v []CampusV1DTO) {
	o.Campuses = v
}

func (o CampusesV1DTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CampusesV1DTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["campuses"] = o.Campuses
	return toSerialize, nil
}

func (o *CampusesV1DTO) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"campuses",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCampusesV1DTO := _CampusesV1DTO{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCampusesV1DTO)

	if err != nil {
		return err
	}

	*o = CampusesV1DTO(varCampusesV1DTO)

	return err
}

type NullableCampusesV1DTO struct {
	value *CampusesV1DTO
	isSet bool
}

func (v NullableCampusesV1DTO) Get() *CampusesV1DTO {
	return v.value
}

func (v *NullableCampusesV1DTO) Set(val *CampusesV1DTO) {
	v.value = val
	v.isSet = true
}

func (v NullableCampusesV1DTO) IsSet() bool {
	return v.isSet
}

func (v *NullableCampusesV1DTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCampusesV1DTO(val *CampusesV1DTO) *NullableCampusesV1DTO {
	return &NullableCampusesV1DTO{value: val, isSet: true}
}

func (v NullableCampusesV1DTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCampusesV1DTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


