/*
School21 OpenAPI Specification

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ClusterV1DTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ClusterV1DTO{}

// ClusterV1DTO Cluster
type ClusterV1DTO struct {
	// Cluster ID
	Id int64 `json:"id"`
	// Cluster name
	Name string `json:"name"`
	// Cluster capacity
	Capacity int32 `json:"capacity"`
	// Number of available seats
	AvailableCapacity int32 `json:"availableCapacity"`
	// The floor where the cluster is located
	Floor int32 `json:"floor"`
}

type _ClusterV1DTO ClusterV1DTO

// NewClusterV1DTO instantiates a new ClusterV1DTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClusterV1DTO(id int64, name string, capacity int32, availableCapacity int32, floor int32) *ClusterV1DTO {
	this := ClusterV1DTO{}
	this.Id = id
	this.Name = name
	this.Capacity = capacity
	this.AvailableCapacity = availableCapacity
	this.Floor = floor
	return &this
}

// NewClusterV1DTOWithDefaults instantiates a new ClusterV1DTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClusterV1DTOWithDefaults() *ClusterV1DTO {
	this := ClusterV1DTO{}
	return &this
}

// GetId returns the Id field value
func (o *ClusterV1DTO) GetId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ClusterV1DTO) GetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ClusterV1DTO) SetId(v int64) {
	o.Id = v
}

// GetName returns the Name field value
func (o *ClusterV1DTO) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ClusterV1DTO) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ClusterV1DTO) SetName(v string) {
	o.Name = v
}

// GetCapacity returns the Capacity field value
func (o *ClusterV1DTO) GetCapacity() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Capacity
}

// GetCapacityOk returns a tuple with the Capacity field value
// and a boolean to check if the value has been set.
func (o *ClusterV1DTO) GetCapacityOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Capacity, true
}

// SetCapacity sets field value
func (o *ClusterV1DTO) SetCapacity(v int32) {
	o.Capacity = v
}

// GetAvailableCapacity returns the AvailableCapacity field value
func (o *ClusterV1DTO) GetAvailableCapacity() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.AvailableCapacity
}

// GetAvailableCapacityOk returns a tuple with the AvailableCapacity field value
// and a boolean to check if the value has been set.
func (o *ClusterV1DTO) GetAvailableCapacityOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AvailableCapacity, true
}

// SetAvailableCapacity sets field value
func (o *ClusterV1DTO) SetAvailableCapacity(v int32) {
	o.AvailableCapacity = v
}

// GetFloor returns the Floor field value
func (o *ClusterV1DTO) GetFloor() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Floor
}

// GetFloorOk returns a tuple with the Floor field value
// and a boolean to check if the value has been set.
func (o *ClusterV1DTO) GetFloorOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Floor, true
}

// SetFloor sets field value
func (o *ClusterV1DTO) SetFloor(v int32) {
	o.Floor = v
}

func (o ClusterV1DTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClusterV1DTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["capacity"] = o.Capacity
	toSerialize["availableCapacity"] = o.AvailableCapacity
	toSerialize["floor"] = o.Floor
	return toSerialize, nil
}

func (o *ClusterV1DTO) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"capacity",
		"availableCapacity",
		"floor",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varClusterV1DTO := _ClusterV1DTO{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varClusterV1DTO)

	if err != nil {
		return err
	}

	*o = ClusterV1DTO(varClusterV1DTO)

	return err
}

type NullableClusterV1DTO struct {
	value *ClusterV1DTO
	isSet bool
}

func (v NullableClusterV1DTO) Get() *ClusterV1DTO {
	return v.value
}

func (v *NullableClusterV1DTO) Set(val *ClusterV1DTO) {
	v.value = val
	v.isSet = true
}

func (v NullableClusterV1DTO) IsSet() bool {
	return v.isSet
}

func (v *NullableClusterV1DTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClusterV1DTO(val *ClusterV1DTO) *NullableClusterV1DTO {
	return &NullableClusterV1DTO{value: val, isSet: true}
}

func (v NullableClusterV1DTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClusterV1DTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


