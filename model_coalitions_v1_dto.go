/*
School21 OpenAPI Specification

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CoalitionsV1DTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CoalitionsV1DTO{}

// CoalitionsV1DTO Coalitions
type CoalitionsV1DTO struct {
	// Array of coalition objects
	Coalitions []CoalitionV1DTO `json:"coalitions"`
}

type _CoalitionsV1DTO CoalitionsV1DTO

// NewCoalitionsV1DTO instantiates a new CoalitionsV1DTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCoalitionsV1DTO(coalitions []CoalitionV1DTO) *CoalitionsV1DTO {
	this := CoalitionsV1DTO{}
	this.Coalitions = coalitions
	return &this
}

// NewCoalitionsV1DTOWithDefaults instantiates a new CoalitionsV1DTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCoalitionsV1DTOWithDefaults() *CoalitionsV1DTO {
	this := CoalitionsV1DTO{}
	return &this
}

// GetCoalitions returns the Coalitions field value
func (o *CoalitionsV1DTO) GetCoalitions() []CoalitionV1DTO {
	if o == nil {
		var ret []CoalitionV1DTO
		return ret
	}

	return o.Coalitions
}

// GetCoalitionsOk returns a tuple with the Coalitions field value
// and a boolean to check if the value has been set.
func (o *CoalitionsV1DTO) GetCoalitionsOk() ([]CoalitionV1DTO, bool) {
	if o == nil {
		return nil, false
	}
	return o.Coalitions, true
}

// SetCoalitions sets field value
func (o *CoalitionsV1DTO) SetCoalitions(v []CoalitionV1DTO) {
	o.Coalitions = v
}

func (o CoalitionsV1DTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CoalitionsV1DTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["coalitions"] = o.Coalitions
	return toSerialize, nil
}

func (o *CoalitionsV1DTO) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"coalitions",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCoalitionsV1DTO := _CoalitionsV1DTO{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCoalitionsV1DTO)

	if err != nil {
		return err
	}

	*o = CoalitionsV1DTO(varCoalitionsV1DTO)

	return err
}

type NullableCoalitionsV1DTO struct {
	value *CoalitionsV1DTO
	isSet bool
}

func (v NullableCoalitionsV1DTO) Get() *CoalitionsV1DTO {
	return v.value
}

func (v *NullableCoalitionsV1DTO) Set(val *CoalitionsV1DTO) {
	v.value = val
	v.isSet = true
}

func (v NullableCoalitionsV1DTO) IsSet() bool {
	return v.isSet
}

func (v *NullableCoalitionsV1DTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCoalitionsV1DTO(val *CoalitionsV1DTO) *NullableCoalitionsV1DTO {
	return &NullableCoalitionsV1DTO{value: val, isSet: true}
}

func (v NullableCoalitionsV1DTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCoalitionsV1DTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


