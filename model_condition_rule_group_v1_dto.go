/*
School21 OpenAPI Specification

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ConditionRuleGroupV1DTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConditionRuleGroupV1DTO{}

// ConditionRuleGroupV1DTO Condition group objects
type ConditionRuleGroupV1DTO struct {
	// The logical condition operator
	LogicalOperator *string `json:"logicalOperator,omitempty"`
	// Array of conditions in the condition group
	RulesInGroup []ConditionRuleV1DTO `json:"rulesInGroup"`
}

type _ConditionRuleGroupV1DTO ConditionRuleGroupV1DTO

// NewConditionRuleGroupV1DTO instantiates a new ConditionRuleGroupV1DTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConditionRuleGroupV1DTO(rulesInGroup []ConditionRuleV1DTO) *ConditionRuleGroupV1DTO {
	this := ConditionRuleGroupV1DTO{}
	this.RulesInGroup = rulesInGroup
	return &this
}

// NewConditionRuleGroupV1DTOWithDefaults instantiates a new ConditionRuleGroupV1DTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConditionRuleGroupV1DTOWithDefaults() *ConditionRuleGroupV1DTO {
	this := ConditionRuleGroupV1DTO{}
	return &this
}

// GetLogicalOperator returns the LogicalOperator field value if set, zero value otherwise.
func (o *ConditionRuleGroupV1DTO) GetLogicalOperator() string {
	if o == nil || IsNil(o.LogicalOperator) {
		var ret string
		return ret
	}
	return *o.LogicalOperator
}

// GetLogicalOperatorOk returns a tuple with the LogicalOperator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConditionRuleGroupV1DTO) GetLogicalOperatorOk() (*string, bool) {
	if o == nil || IsNil(o.LogicalOperator) {
		return nil, false
	}
	return o.LogicalOperator, true
}

// HasLogicalOperator returns a boolean if a field has been set.
func (o *ConditionRuleGroupV1DTO) HasLogicalOperator() bool {
	if o != nil && !IsNil(o.LogicalOperator) {
		return true
	}

	return false
}

// SetLogicalOperator gets a reference to the given string and assigns it to the LogicalOperator field.
func (o *ConditionRuleGroupV1DTO) SetLogicalOperator(v string) {
	o.LogicalOperator = &v
}

// GetRulesInGroup returns the RulesInGroup field value
func (o *ConditionRuleGroupV1DTO) GetRulesInGroup() []ConditionRuleV1DTO {
	if o == nil {
		var ret []ConditionRuleV1DTO
		return ret
	}

	return o.RulesInGroup
}

// GetRulesInGroupOk returns a tuple with the RulesInGroup field value
// and a boolean to check if the value has been set.
func (o *ConditionRuleGroupV1DTO) GetRulesInGroupOk() ([]ConditionRuleV1DTO, bool) {
	if o == nil {
		return nil, false
	}
	return o.RulesInGroup, true
}

// SetRulesInGroup sets field value
func (o *ConditionRuleGroupV1DTO) SetRulesInGroup(v []ConditionRuleV1DTO) {
	o.RulesInGroup = v
}

func (o ConditionRuleGroupV1DTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConditionRuleGroupV1DTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.LogicalOperator) {
		toSerialize["logicalOperator"] = o.LogicalOperator
	}
	toSerialize["rulesInGroup"] = o.RulesInGroup
	return toSerialize, nil
}

func (o *ConditionRuleGroupV1DTO) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"rulesInGroup",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varConditionRuleGroupV1DTO := _ConditionRuleGroupV1DTO{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varConditionRuleGroupV1DTO)

	if err != nil {
		return err
	}

	*o = ConditionRuleGroupV1DTO(varConditionRuleGroupV1DTO)

	return err
}

type NullableConditionRuleGroupV1DTO struct {
	value *ConditionRuleGroupV1DTO
	isSet bool
}

func (v NullableConditionRuleGroupV1DTO) Get() *ConditionRuleGroupV1DTO {
	return v.value
}

func (v *NullableConditionRuleGroupV1DTO) Set(val *ConditionRuleGroupV1DTO) {
	v.value = val
	v.isSet = true
}

func (v NullableConditionRuleGroupV1DTO) IsSet() bool {
	return v.isSet
}

func (v *NullableConditionRuleGroupV1DTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConditionRuleGroupV1DTO(val *ConditionRuleGroupV1DTO) *NullableConditionRuleGroupV1DTO {
	return &NullableConditionRuleGroupV1DTO{value: val, isSet: true}
}

func (v NullableConditionRuleGroupV1DTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConditionRuleGroupV1DTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


