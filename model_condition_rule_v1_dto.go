/*
School21 OpenAPI Specification

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ConditionRuleV1DTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConditionRuleV1DTO{}

// ConditionRuleV1DTO Condition in the condition group
type ConditionRuleV1DTO struct {
	// The logical condition operator
	LogicalOperator *string `json:"logicalOperator,omitempty"`
	Value ConditionRuleValueV1DTO `json:"value"`
}

type _ConditionRuleV1DTO ConditionRuleV1DTO

// NewConditionRuleV1DTO instantiates a new ConditionRuleV1DTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConditionRuleV1DTO(value ConditionRuleValueV1DTO) *ConditionRuleV1DTO {
	this := ConditionRuleV1DTO{}
	this.Value = value
	return &this
}

// NewConditionRuleV1DTOWithDefaults instantiates a new ConditionRuleV1DTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConditionRuleV1DTOWithDefaults() *ConditionRuleV1DTO {
	this := ConditionRuleV1DTO{}
	return &this
}

// GetLogicalOperator returns the LogicalOperator field value if set, zero value otherwise.
func (o *ConditionRuleV1DTO) GetLogicalOperator() string {
	if o == nil || IsNil(o.LogicalOperator) {
		var ret string
		return ret
	}
	return *o.LogicalOperator
}

// GetLogicalOperatorOk returns a tuple with the LogicalOperator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConditionRuleV1DTO) GetLogicalOperatorOk() (*string, bool) {
	if o == nil || IsNil(o.LogicalOperator) {
		return nil, false
	}
	return o.LogicalOperator, true
}

// HasLogicalOperator returns a boolean if a field has been set.
func (o *ConditionRuleV1DTO) HasLogicalOperator() bool {
	if o != nil && !IsNil(o.LogicalOperator) {
		return true
	}

	return false
}

// SetLogicalOperator gets a reference to the given string and assigns it to the LogicalOperator field.
func (o *ConditionRuleV1DTO) SetLogicalOperator(v string) {
	o.LogicalOperator = &v
}

// GetValue returns the Value field value
func (o *ConditionRuleV1DTO) GetValue() ConditionRuleValueV1DTO {
	if o == nil {
		var ret ConditionRuleValueV1DTO
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *ConditionRuleV1DTO) GetValueOk() (*ConditionRuleValueV1DTO, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *ConditionRuleV1DTO) SetValue(v ConditionRuleValueV1DTO) {
	o.Value = v
}

func (o ConditionRuleV1DTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConditionRuleV1DTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.LogicalOperator) {
		toSerialize["logicalOperator"] = o.LogicalOperator
	}
	toSerialize["value"] = o.Value
	return toSerialize, nil
}

func (o *ConditionRuleV1DTO) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"value",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varConditionRuleV1DTO := _ConditionRuleV1DTO{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varConditionRuleV1DTO)

	if err != nil {
		return err
	}

	*o = ConditionRuleV1DTO(varConditionRuleV1DTO)

	return err
}

type NullableConditionRuleV1DTO struct {
	value *ConditionRuleV1DTO
	isSet bool
}

func (v NullableConditionRuleV1DTO) Get() *ConditionRuleV1DTO {
	return v.value
}

func (v *NullableConditionRuleV1DTO) Set(val *ConditionRuleV1DTO) {
	v.value = val
	v.isSet = true
}

func (v NullableConditionRuleV1DTO) IsSet() bool {
	return v.isSet
}

func (v *NullableConditionRuleV1DTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConditionRuleV1DTO(val *ConditionRuleV1DTO) *NullableConditionRuleV1DTO {
	return &NullableConditionRuleV1DTO{value: val, isSet: true}
}

func (v NullableConditionRuleV1DTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConditionRuleV1DTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


