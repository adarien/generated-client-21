/*
School21 OpenAPI Specification

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ConditionRuleValueV1DTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConditionRuleValueV1DTO{}

// ConditionRuleValueV1DTO The object of the condition description
type ConditionRuleValueV1DTO struct {
	// Field ID
	FieldId int64 `json:"fieldId"`
	// Field Name
	FieldName string `json:"fieldName"`
	// Subfield ID
	SubFieldKey string `json:"subFieldKey"`
	// Subfield Name
	SubFieldValue string `json:"subFieldValue"`
	// Condition value operator
	Operator string `json:"operator"`
	// Array of condition values
	Value []ConditionValueValueV1DTO `json:"value"`
}

type _ConditionRuleValueV1DTO ConditionRuleValueV1DTO

// NewConditionRuleValueV1DTO instantiates a new ConditionRuleValueV1DTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConditionRuleValueV1DTO(fieldId int64, fieldName string, subFieldKey string, subFieldValue string, operator string, value []ConditionValueValueV1DTO) *ConditionRuleValueV1DTO {
	this := ConditionRuleValueV1DTO{}
	this.FieldId = fieldId
	this.FieldName = fieldName
	this.SubFieldKey = subFieldKey
	this.SubFieldValue = subFieldValue
	this.Operator = operator
	this.Value = value
	return &this
}

// NewConditionRuleValueV1DTOWithDefaults instantiates a new ConditionRuleValueV1DTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConditionRuleValueV1DTOWithDefaults() *ConditionRuleValueV1DTO {
	this := ConditionRuleValueV1DTO{}
	return &this
}

// GetFieldId returns the FieldId field value
func (o *ConditionRuleValueV1DTO) GetFieldId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.FieldId
}

// GetFieldIdOk returns a tuple with the FieldId field value
// and a boolean to check if the value has been set.
func (o *ConditionRuleValueV1DTO) GetFieldIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FieldId, true
}

// SetFieldId sets field value
func (o *ConditionRuleValueV1DTO) SetFieldId(v int64) {
	o.FieldId = v
}

// GetFieldName returns the FieldName field value
func (o *ConditionRuleValueV1DTO) GetFieldName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FieldName
}

// GetFieldNameOk returns a tuple with the FieldName field value
// and a boolean to check if the value has been set.
func (o *ConditionRuleValueV1DTO) GetFieldNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FieldName, true
}

// SetFieldName sets field value
func (o *ConditionRuleValueV1DTO) SetFieldName(v string) {
	o.FieldName = v
}

// GetSubFieldKey returns the SubFieldKey field value
func (o *ConditionRuleValueV1DTO) GetSubFieldKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SubFieldKey
}

// GetSubFieldKeyOk returns a tuple with the SubFieldKey field value
// and a boolean to check if the value has been set.
func (o *ConditionRuleValueV1DTO) GetSubFieldKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SubFieldKey, true
}

// SetSubFieldKey sets field value
func (o *ConditionRuleValueV1DTO) SetSubFieldKey(v string) {
	o.SubFieldKey = v
}

// GetSubFieldValue returns the SubFieldValue field value
func (o *ConditionRuleValueV1DTO) GetSubFieldValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SubFieldValue
}

// GetSubFieldValueOk returns a tuple with the SubFieldValue field value
// and a boolean to check if the value has been set.
func (o *ConditionRuleValueV1DTO) GetSubFieldValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SubFieldValue, true
}

// SetSubFieldValue sets field value
func (o *ConditionRuleValueV1DTO) SetSubFieldValue(v string) {
	o.SubFieldValue = v
}

// GetOperator returns the Operator field value
func (o *ConditionRuleValueV1DTO) GetOperator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Operator
}

// GetOperatorOk returns a tuple with the Operator field value
// and a boolean to check if the value has been set.
func (o *ConditionRuleValueV1DTO) GetOperatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Operator, true
}

// SetOperator sets field value
func (o *ConditionRuleValueV1DTO) SetOperator(v string) {
	o.Operator = v
}

// GetValue returns the Value field value
func (o *ConditionRuleValueV1DTO) GetValue() []ConditionValueValueV1DTO {
	if o == nil {
		var ret []ConditionValueValueV1DTO
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *ConditionRuleValueV1DTO) GetValueOk() ([]ConditionValueValueV1DTO, bool) {
	if o == nil {
		return nil, false
	}
	return o.Value, true
}

// SetValue sets field value
func (o *ConditionRuleValueV1DTO) SetValue(v []ConditionValueValueV1DTO) {
	o.Value = v
}

func (o ConditionRuleValueV1DTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConditionRuleValueV1DTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["fieldId"] = o.FieldId
	toSerialize["fieldName"] = o.FieldName
	toSerialize["subFieldKey"] = o.SubFieldKey
	toSerialize["subFieldValue"] = o.SubFieldValue
	toSerialize["operator"] = o.Operator
	toSerialize["value"] = o.Value
	return toSerialize, nil
}

func (o *ConditionRuleValueV1DTO) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"fieldId",
		"fieldName",
		"subFieldKey",
		"subFieldValue",
		"operator",
		"value",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varConditionRuleValueV1DTO := _ConditionRuleValueV1DTO{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varConditionRuleValueV1DTO)

	if err != nil {
		return err
	}

	*o = ConditionRuleValueV1DTO(varConditionRuleValueV1DTO)

	return err
}

type NullableConditionRuleValueV1DTO struct {
	value *ConditionRuleValueV1DTO
	isSet bool
}

func (v NullableConditionRuleValueV1DTO) Get() *ConditionRuleValueV1DTO {
	return v.value
}

func (v *NullableConditionRuleValueV1DTO) Set(val *ConditionRuleValueV1DTO) {
	v.value = val
	v.isSet = true
}

func (v NullableConditionRuleValueV1DTO) IsSet() bool {
	return v.isSet
}

func (v *NullableConditionRuleValueV1DTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConditionRuleValueV1DTO(val *ConditionRuleValueV1DTO) *NullableConditionRuleValueV1DTO {
	return &NullableConditionRuleValueV1DTO{value: val, isSet: true}
}

func (v NullableConditionRuleValueV1DTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConditionRuleValueV1DTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


