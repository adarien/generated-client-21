/*
School21 OpenAPI Specification

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ConditionValueValueV1DTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConditionValueValueV1DTO{}

// ConditionValueValueV1DTO Array of condition values
type ConditionValueValueV1DTO struct {
	// The value of the condition
	Key string `json:"key"`
	// Name value of the condition
	Value *string `json:"value,omitempty"`
}

type _ConditionValueValueV1DTO ConditionValueValueV1DTO

// NewConditionValueValueV1DTO instantiates a new ConditionValueValueV1DTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConditionValueValueV1DTO(key string) *ConditionValueValueV1DTO {
	this := ConditionValueValueV1DTO{}
	this.Key = key
	return &this
}

// NewConditionValueValueV1DTOWithDefaults instantiates a new ConditionValueValueV1DTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConditionValueValueV1DTOWithDefaults() *ConditionValueValueV1DTO {
	this := ConditionValueValueV1DTO{}
	return &this
}

// GetKey returns the Key field value
func (o *ConditionValueValueV1DTO) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *ConditionValueValueV1DTO) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *ConditionValueValueV1DTO) SetKey(v string) {
	o.Key = v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *ConditionValueValueV1DTO) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConditionValueValueV1DTO) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *ConditionValueValueV1DTO) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *ConditionValueValueV1DTO) SetValue(v string) {
	o.Value = &v
}

func (o ConditionValueValueV1DTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConditionValueValueV1DTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["key"] = o.Key
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

func (o *ConditionValueValueV1DTO) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"key",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varConditionValueValueV1DTO := _ConditionValueValueV1DTO{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varConditionValueValueV1DTO)

	if err != nil {
		return err
	}

	*o = ConditionValueValueV1DTO(varConditionValueValueV1DTO)

	return err
}

type NullableConditionValueValueV1DTO struct {
	value *ConditionValueValueV1DTO
	isSet bool
}

func (v NullableConditionValueValueV1DTO) Get() *ConditionValueValueV1DTO {
	return v.value
}

func (v *NullableConditionValueValueV1DTO) Set(val *ConditionValueValueV1DTO) {
	v.value = val
	v.isSet = true
}

func (v NullableConditionValueValueV1DTO) IsSet() bool {
	return v.isSet
}

func (v *NullableConditionValueValueV1DTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConditionValueValueV1DTO(val *ConditionValueValueV1DTO) *NullableConditionValueValueV1DTO {
	return &NullableConditionValueValueV1DTO{value: val, isSet: true}
}

func (v NullableConditionValueValueV1DTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConditionValueValueV1DTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


