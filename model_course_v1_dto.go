/*
School21 OpenAPI Specification

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CourseV1DTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CourseV1DTO{}

// CourseV1DTO Course
type CourseV1DTO struct {
	// Course ID
	CourseId int64 `json:"courseId"`
	// Course name
	Title string `json:"title"`
	// Course description
	Description string `json:"description"`
	// Course duration (in hours)
	DurationHours int32 `json:"durationHours"`
	// XP per course
	Xp int32 `json:"xp"`
	// Array of condition group objects
	StartConditions []ConditionRuleGroupV1DTO `json:"startConditions,omitempty"`
}

type _CourseV1DTO CourseV1DTO

// NewCourseV1DTO instantiates a new CourseV1DTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCourseV1DTO(courseId int64, title string, description string, durationHours int32, xp int32) *CourseV1DTO {
	this := CourseV1DTO{}
	this.CourseId = courseId
	this.Title = title
	this.Description = description
	this.DurationHours = durationHours
	this.Xp = xp
	return &this
}

// NewCourseV1DTOWithDefaults instantiates a new CourseV1DTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCourseV1DTOWithDefaults() *CourseV1DTO {
	this := CourseV1DTO{}
	return &this
}

// GetCourseId returns the CourseId field value
func (o *CourseV1DTO) GetCourseId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.CourseId
}

// GetCourseIdOk returns a tuple with the CourseId field value
// and a boolean to check if the value has been set.
func (o *CourseV1DTO) GetCourseIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CourseId, true
}

// SetCourseId sets field value
func (o *CourseV1DTO) SetCourseId(v int64) {
	o.CourseId = v
}

// GetTitle returns the Title field value
func (o *CourseV1DTO) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *CourseV1DTO) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *CourseV1DTO) SetTitle(v string) {
	o.Title = v
}

// GetDescription returns the Description field value
func (o *CourseV1DTO) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *CourseV1DTO) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *CourseV1DTO) SetDescription(v string) {
	o.Description = v
}

// GetDurationHours returns the DurationHours field value
func (o *CourseV1DTO) GetDurationHours() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.DurationHours
}

// GetDurationHoursOk returns a tuple with the DurationHours field value
// and a boolean to check if the value has been set.
func (o *CourseV1DTO) GetDurationHoursOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DurationHours, true
}

// SetDurationHours sets field value
func (o *CourseV1DTO) SetDurationHours(v int32) {
	o.DurationHours = v
}

// GetXp returns the Xp field value
func (o *CourseV1DTO) GetXp() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Xp
}

// GetXpOk returns a tuple with the Xp field value
// and a boolean to check if the value has been set.
func (o *CourseV1DTO) GetXpOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Xp, true
}

// SetXp sets field value
func (o *CourseV1DTO) SetXp(v int32) {
	o.Xp = v
}

// GetStartConditions returns the StartConditions field value if set, zero value otherwise.
func (o *CourseV1DTO) GetStartConditions() []ConditionRuleGroupV1DTO {
	if o == nil || IsNil(o.StartConditions) {
		var ret []ConditionRuleGroupV1DTO
		return ret
	}
	return o.StartConditions
}

// GetStartConditionsOk returns a tuple with the StartConditions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CourseV1DTO) GetStartConditionsOk() ([]ConditionRuleGroupV1DTO, bool) {
	if o == nil || IsNil(o.StartConditions) {
		return nil, false
	}
	return o.StartConditions, true
}

// HasStartConditions returns a boolean if a field has been set.
func (o *CourseV1DTO) HasStartConditions() bool {
	if o != nil && !IsNil(o.StartConditions) {
		return true
	}

	return false
}

// SetStartConditions gets a reference to the given []ConditionRuleGroupV1DTO and assigns it to the StartConditions field.
func (o *CourseV1DTO) SetStartConditions(v []ConditionRuleGroupV1DTO) {
	o.StartConditions = v
}

func (o CourseV1DTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CourseV1DTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["courseId"] = o.CourseId
	toSerialize["title"] = o.Title
	toSerialize["description"] = o.Description
	toSerialize["durationHours"] = o.DurationHours
	toSerialize["xp"] = o.Xp
	if !IsNil(o.StartConditions) {
		toSerialize["startConditions"] = o.StartConditions
	}
	return toSerialize, nil
}

func (o *CourseV1DTO) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"courseId",
		"title",
		"description",
		"durationHours",
		"xp",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCourseV1DTO := _CourseV1DTO{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCourseV1DTO)

	if err != nil {
		return err
	}

	*o = CourseV1DTO(varCourseV1DTO)

	return err
}

type NullableCourseV1DTO struct {
	value *CourseV1DTO
	isSet bool
}

func (v NullableCourseV1DTO) Get() *CourseV1DTO {
	return v.value
}

func (v *NullableCourseV1DTO) Set(val *CourseV1DTO) {
	v.value = val
	v.isSet = true
}

func (v NullableCourseV1DTO) IsSet() bool {
	return v.isSet
}

func (v *NullableCourseV1DTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCourseV1DTO(val *CourseV1DTO) *NullableCourseV1DTO {
	return &NullableCourseV1DTO{value: val, isSet: true}
}

func (v NullableCourseV1DTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCourseV1DTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


