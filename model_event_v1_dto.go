/*
School21 OpenAPI Specification

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the EventV1DTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventV1DTO{}

// EventV1DTO Event
type EventV1DTO struct {
	// Event ID
	Id int64 `json:"id"`
	// Event type
	Type string `json:"type"`
	// Event name
	Name string `json:"name"`
	// Event description
	Description *string `json:"description,omitempty"`
	// Location of the event
	Location string `json:"location"`
	// Date and time of the start of the event (UTC)
	StartDateTime time.Time `json:"startDateTime"`
	// Date and time of the end of the event (UTC)
	EndDateTime time.Time `json:"endDateTime"`
	// Array of strings with the logins of the organizing participants
	Organizers []string `json:"organizers"`
	// Maximum number of participants who can register for the event
	Capacity int32 `json:"capacity"`
	// Current number of participants registered for the event
	RegisterCount int32 `json:"registerCount"`
}

type _EventV1DTO EventV1DTO

// NewEventV1DTO instantiates a new EventV1DTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventV1DTO(id int64, type_ string, name string, location string, startDateTime time.Time, endDateTime time.Time, organizers []string, capacity int32, registerCount int32) *EventV1DTO {
	this := EventV1DTO{}
	this.Id = id
	this.Type = type_
	this.Name = name
	this.Location = location
	this.StartDateTime = startDateTime
	this.EndDateTime = endDateTime
	this.Organizers = organizers
	this.Capacity = capacity
	this.RegisterCount = registerCount
	return &this
}

// NewEventV1DTOWithDefaults instantiates a new EventV1DTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventV1DTOWithDefaults() *EventV1DTO {
	this := EventV1DTO{}
	return &this
}

// GetId returns the Id field value
func (o *EventV1DTO) GetId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *EventV1DTO) GetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *EventV1DTO) SetId(v int64) {
	o.Id = v
}

// GetType returns the Type field value
func (o *EventV1DTO) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *EventV1DTO) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *EventV1DTO) SetType(v string) {
	o.Type = v
}

// GetName returns the Name field value
func (o *EventV1DTO) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *EventV1DTO) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *EventV1DTO) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *EventV1DTO) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventV1DTO) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *EventV1DTO) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *EventV1DTO) SetDescription(v string) {
	o.Description = &v
}

// GetLocation returns the Location field value
func (o *EventV1DTO) GetLocation() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Location
}

// GetLocationOk returns a tuple with the Location field value
// and a boolean to check if the value has been set.
func (o *EventV1DTO) GetLocationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Location, true
}

// SetLocation sets field value
func (o *EventV1DTO) SetLocation(v string) {
	o.Location = v
}

// GetStartDateTime returns the StartDateTime field value
func (o *EventV1DTO) GetStartDateTime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.StartDateTime
}

// GetStartDateTimeOk returns a tuple with the StartDateTime field value
// and a boolean to check if the value has been set.
func (o *EventV1DTO) GetStartDateTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StartDateTime, true
}

// SetStartDateTime sets field value
func (o *EventV1DTO) SetStartDateTime(v time.Time) {
	o.StartDateTime = v
}

// GetEndDateTime returns the EndDateTime field value
func (o *EventV1DTO) GetEndDateTime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.EndDateTime
}

// GetEndDateTimeOk returns a tuple with the EndDateTime field value
// and a boolean to check if the value has been set.
func (o *EventV1DTO) GetEndDateTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EndDateTime, true
}

// SetEndDateTime sets field value
func (o *EventV1DTO) SetEndDateTime(v time.Time) {
	o.EndDateTime = v
}

// GetOrganizers returns the Organizers field value
func (o *EventV1DTO) GetOrganizers() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Organizers
}

// GetOrganizersOk returns a tuple with the Organizers field value
// and a boolean to check if the value has been set.
func (o *EventV1DTO) GetOrganizersOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Organizers, true
}

// SetOrganizers sets field value
func (o *EventV1DTO) SetOrganizers(v []string) {
	o.Organizers = v
}

// GetCapacity returns the Capacity field value
func (o *EventV1DTO) GetCapacity() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Capacity
}

// GetCapacityOk returns a tuple with the Capacity field value
// and a boolean to check if the value has been set.
func (o *EventV1DTO) GetCapacityOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Capacity, true
}

// SetCapacity sets field value
func (o *EventV1DTO) SetCapacity(v int32) {
	o.Capacity = v
}

// GetRegisterCount returns the RegisterCount field value
func (o *EventV1DTO) GetRegisterCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.RegisterCount
}

// GetRegisterCountOk returns a tuple with the RegisterCount field value
// and a boolean to check if the value has been set.
func (o *EventV1DTO) GetRegisterCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RegisterCount, true
}

// SetRegisterCount sets field value
func (o *EventV1DTO) SetRegisterCount(v int32) {
	o.RegisterCount = v
}

func (o EventV1DTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventV1DTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["type"] = o.Type
	toSerialize["name"] = o.Name
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["location"] = o.Location
	toSerialize["startDateTime"] = o.StartDateTime
	toSerialize["endDateTime"] = o.EndDateTime
	toSerialize["organizers"] = o.Organizers
	toSerialize["capacity"] = o.Capacity
	toSerialize["registerCount"] = o.RegisterCount
	return toSerialize, nil
}

func (o *EventV1DTO) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"type",
		"name",
		"location",
		"startDateTime",
		"endDateTime",
		"organizers",
		"capacity",
		"registerCount",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEventV1DTO := _EventV1DTO{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEventV1DTO)

	if err != nil {
		return err
	}

	*o = EventV1DTO(varEventV1DTO)

	return err
}

type NullableEventV1DTO struct {
	value *EventV1DTO
	isSet bool
}

func (v NullableEventV1DTO) Get() *EventV1DTO {
	return v.value
}

func (v *NullableEventV1DTO) Set(val *EventV1DTO) {
	v.value = val
	v.isSet = true
}

func (v NullableEventV1DTO) IsSet() bool {
	return v.isSet
}

func (v *NullableEventV1DTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventV1DTO(val *EventV1DTO) *NullableEventV1DTO {
	return &NullableEventV1DTO{value: val, isSet: true}
}

func (v NullableEventV1DTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventV1DTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


