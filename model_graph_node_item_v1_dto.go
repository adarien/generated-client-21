/*
School21 OpenAPI Specification

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the GraphNodeItemV1DTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GraphNodeItemV1DTO{}

// GraphNodeItemV1DTO Graph node item
type GraphNodeItemV1DTO struct {
	// Node item ID
	Id string `json:"id"`
	// Node item code in the graph
	Code string `json:"code"`
	// Handles for connecting node items
	Handles []string `json:"handles"`
	// Node item type
	EntityType string `json:"entityType"`
	// ID of the entity linked to the node item
	EntityId int64 `json:"entityId"`
}

type _GraphNodeItemV1DTO GraphNodeItemV1DTO

// NewGraphNodeItemV1DTO instantiates a new GraphNodeItemV1DTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGraphNodeItemV1DTO(id string, code string, handles []string, entityType string, entityId int64) *GraphNodeItemV1DTO {
	this := GraphNodeItemV1DTO{}
	this.Id = id
	this.Code = code
	this.Handles = handles
	this.EntityType = entityType
	this.EntityId = entityId
	return &this
}

// NewGraphNodeItemV1DTOWithDefaults instantiates a new GraphNodeItemV1DTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGraphNodeItemV1DTOWithDefaults() *GraphNodeItemV1DTO {
	this := GraphNodeItemV1DTO{}
	return &this
}

// GetId returns the Id field value
func (o *GraphNodeItemV1DTO) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *GraphNodeItemV1DTO) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *GraphNodeItemV1DTO) SetId(v string) {
	o.Id = v
}

// GetCode returns the Code field value
func (o *GraphNodeItemV1DTO) GetCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *GraphNodeItemV1DTO) GetCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *GraphNodeItemV1DTO) SetCode(v string) {
	o.Code = v
}

// GetHandles returns the Handles field value
func (o *GraphNodeItemV1DTO) GetHandles() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Handles
}

// GetHandlesOk returns a tuple with the Handles field value
// and a boolean to check if the value has been set.
func (o *GraphNodeItemV1DTO) GetHandlesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Handles, true
}

// SetHandles sets field value
func (o *GraphNodeItemV1DTO) SetHandles(v []string) {
	o.Handles = v
}

// GetEntityType returns the EntityType field value
func (o *GraphNodeItemV1DTO) GetEntityType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EntityType
}

// GetEntityTypeOk returns a tuple with the EntityType field value
// and a boolean to check if the value has been set.
func (o *GraphNodeItemV1DTO) GetEntityTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EntityType, true
}

// SetEntityType sets field value
func (o *GraphNodeItemV1DTO) SetEntityType(v string) {
	o.EntityType = v
}

// GetEntityId returns the EntityId field value
func (o *GraphNodeItemV1DTO) GetEntityId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.EntityId
}

// GetEntityIdOk returns a tuple with the EntityId field value
// and a boolean to check if the value has been set.
func (o *GraphNodeItemV1DTO) GetEntityIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EntityId, true
}

// SetEntityId sets field value
func (o *GraphNodeItemV1DTO) SetEntityId(v int64) {
	o.EntityId = v
}

func (o GraphNodeItemV1DTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GraphNodeItemV1DTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["code"] = o.Code
	toSerialize["handles"] = o.Handles
	toSerialize["entityType"] = o.EntityType
	toSerialize["entityId"] = o.EntityId
	return toSerialize, nil
}

func (o *GraphNodeItemV1DTO) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"code",
		"handles",
		"entityType",
		"entityId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGraphNodeItemV1DTO := _GraphNodeItemV1DTO{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGraphNodeItemV1DTO)

	if err != nil {
		return err
	}

	*o = GraphNodeItemV1DTO(varGraphNodeItemV1DTO)

	return err
}

type NullableGraphNodeItemV1DTO struct {
	value *GraphNodeItemV1DTO
	isSet bool
}

func (v NullableGraphNodeItemV1DTO) Get() *GraphNodeItemV1DTO {
	return v.value
}

func (v *NullableGraphNodeItemV1DTO) Set(val *GraphNodeItemV1DTO) {
	v.value = val
	v.isSet = true
}

func (v NullableGraphNodeItemV1DTO) IsSet() bool {
	return v.isSet
}

func (v *NullableGraphNodeItemV1DTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGraphNodeItemV1DTO(val *GraphNodeItemV1DTO) *NullableGraphNodeItemV1DTO {
	return &NullableGraphNodeItemV1DTO{value: val, isSet: true}
}

func (v NullableGraphNodeItemV1DTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGraphNodeItemV1DTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


