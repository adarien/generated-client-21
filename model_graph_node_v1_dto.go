/*
School21 OpenAPI Specification

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the GraphNodeV1DTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GraphNodeV1DTO{}

// GraphNodeV1DTO Graph node
type GraphNodeV1DTO struct {
	// Node ID
	Id string `json:"id"`
	// Node name
	Label string `json:"label"`
	// Node items
	Items []GraphNodeItemV1DTO `json:"items"`
}

type _GraphNodeV1DTO GraphNodeV1DTO

// NewGraphNodeV1DTO instantiates a new GraphNodeV1DTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGraphNodeV1DTO(id string, label string, items []GraphNodeItemV1DTO) *GraphNodeV1DTO {
	this := GraphNodeV1DTO{}
	this.Id = id
	this.Label = label
	this.Items = items
	return &this
}

// NewGraphNodeV1DTOWithDefaults instantiates a new GraphNodeV1DTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGraphNodeV1DTOWithDefaults() *GraphNodeV1DTO {
	this := GraphNodeV1DTO{}
	return &this
}

// GetId returns the Id field value
func (o *GraphNodeV1DTO) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *GraphNodeV1DTO) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *GraphNodeV1DTO) SetId(v string) {
	o.Id = v
}

// GetLabel returns the Label field value
func (o *GraphNodeV1DTO) GetLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Label
}

// GetLabelOk returns a tuple with the Label field value
// and a boolean to check if the value has been set.
func (o *GraphNodeV1DTO) GetLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Label, true
}

// SetLabel sets field value
func (o *GraphNodeV1DTO) SetLabel(v string) {
	o.Label = v
}

// GetItems returns the Items field value
func (o *GraphNodeV1DTO) GetItems() []GraphNodeItemV1DTO {
	if o == nil {
		var ret []GraphNodeItemV1DTO
		return ret
	}

	return o.Items
}

// GetItemsOk returns a tuple with the Items field value
// and a boolean to check if the value has been set.
func (o *GraphNodeV1DTO) GetItemsOk() ([]GraphNodeItemV1DTO, bool) {
	if o == nil {
		return nil, false
	}
	return o.Items, true
}

// SetItems sets field value
func (o *GraphNodeV1DTO) SetItems(v []GraphNodeItemV1DTO) {
	o.Items = v
}

func (o GraphNodeV1DTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GraphNodeV1DTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["label"] = o.Label
	toSerialize["items"] = o.Items
	return toSerialize, nil
}

func (o *GraphNodeV1DTO) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"label",
		"items",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGraphNodeV1DTO := _GraphNodeV1DTO{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGraphNodeV1DTO)

	if err != nil {
		return err
	}

	*o = GraphNodeV1DTO(varGraphNodeV1DTO)

	return err
}

type NullableGraphNodeV1DTO struct {
	value *GraphNodeV1DTO
	isSet bool
}

func (v NullableGraphNodeV1DTO) Get() *GraphNodeV1DTO {
	return v.value
}

func (v *NullableGraphNodeV1DTO) Set(val *GraphNodeV1DTO) {
	v.value = val
	v.isSet = true
}

func (v NullableGraphNodeV1DTO) IsSet() bool {
	return v.isSet
}

func (v *NullableGraphNodeV1DTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGraphNodeV1DTO(val *GraphNodeV1DTO) *NullableGraphNodeV1DTO {
	return &NullableGraphNodeV1DTO{value: val, isSet: true}
}

func (v NullableGraphNodeV1DTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGraphNodeV1DTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


