/*
School21 OpenAPI Specification

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the ParticipantBadgeV1DTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ParticipantBadgeV1DTO{}

// ParticipantBadgeV1DTO Participant Badge
type ParticipantBadgeV1DTO struct {
	// Badge name
	Name string `json:"name"`
	// Date and time of the receipt (UTC)
	ReceiptDateTime time.Time `json:"receiptDateTime"`
	// URL of the badge icon
	IconUrl string `json:"iconUrl"`
}

type _ParticipantBadgeV1DTO ParticipantBadgeV1DTO

// NewParticipantBadgeV1DTO instantiates a new ParticipantBadgeV1DTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewParticipantBadgeV1DTO(name string, receiptDateTime time.Time, iconUrl string) *ParticipantBadgeV1DTO {
	this := ParticipantBadgeV1DTO{}
	this.Name = name
	this.ReceiptDateTime = receiptDateTime
	this.IconUrl = iconUrl
	return &this
}

// NewParticipantBadgeV1DTOWithDefaults instantiates a new ParticipantBadgeV1DTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewParticipantBadgeV1DTOWithDefaults() *ParticipantBadgeV1DTO {
	this := ParticipantBadgeV1DTO{}
	return &this
}

// GetName returns the Name field value
func (o *ParticipantBadgeV1DTO) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ParticipantBadgeV1DTO) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ParticipantBadgeV1DTO) SetName(v string) {
	o.Name = v
}

// GetReceiptDateTime returns the ReceiptDateTime field value
func (o *ParticipantBadgeV1DTO) GetReceiptDateTime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.ReceiptDateTime
}

// GetReceiptDateTimeOk returns a tuple with the ReceiptDateTime field value
// and a boolean to check if the value has been set.
func (o *ParticipantBadgeV1DTO) GetReceiptDateTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReceiptDateTime, true
}

// SetReceiptDateTime sets field value
func (o *ParticipantBadgeV1DTO) SetReceiptDateTime(v time.Time) {
	o.ReceiptDateTime = v
}

// GetIconUrl returns the IconUrl field value
func (o *ParticipantBadgeV1DTO) GetIconUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IconUrl
}

// GetIconUrlOk returns a tuple with the IconUrl field value
// and a boolean to check if the value has been set.
func (o *ParticipantBadgeV1DTO) GetIconUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IconUrl, true
}

// SetIconUrl sets field value
func (o *ParticipantBadgeV1DTO) SetIconUrl(v string) {
	o.IconUrl = v
}

func (o ParticipantBadgeV1DTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ParticipantBadgeV1DTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["receiptDateTime"] = o.ReceiptDateTime
	toSerialize["iconUrl"] = o.IconUrl
	return toSerialize, nil
}

func (o *ParticipantBadgeV1DTO) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"receiptDateTime",
		"iconUrl",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varParticipantBadgeV1DTO := _ParticipantBadgeV1DTO{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varParticipantBadgeV1DTO)

	if err != nil {
		return err
	}

	*o = ParticipantBadgeV1DTO(varParticipantBadgeV1DTO)

	return err
}

type NullableParticipantBadgeV1DTO struct {
	value *ParticipantBadgeV1DTO
	isSet bool
}

func (v NullableParticipantBadgeV1DTO) Get() *ParticipantBadgeV1DTO {
	return v.value
}

func (v *NullableParticipantBadgeV1DTO) Set(val *ParticipantBadgeV1DTO) {
	v.value = val
	v.isSet = true
}

func (v NullableParticipantBadgeV1DTO) IsSet() bool {
	return v.isSet
}

func (v *NullableParticipantBadgeV1DTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableParticipantBadgeV1DTO(val *ParticipantBadgeV1DTO) *NullableParticipantBadgeV1DTO {
	return &NullableParticipantBadgeV1DTO{value: val, isSet: true}
}

func (v NullableParticipantBadgeV1DTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableParticipantBadgeV1DTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


