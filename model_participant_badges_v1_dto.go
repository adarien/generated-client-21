/*
School21 OpenAPI Specification

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ParticipantBadgesV1DTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ParticipantBadgesV1DTO{}

// ParticipantBadgesV1DTO Participant Badges
type ParticipantBadgesV1DTO struct {
	// Array of badges
	Badges []ParticipantBadgeV1DTO `json:"badges"`
}

type _ParticipantBadgesV1DTO ParticipantBadgesV1DTO

// NewParticipantBadgesV1DTO instantiates a new ParticipantBadgesV1DTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewParticipantBadgesV1DTO(badges []ParticipantBadgeV1DTO) *ParticipantBadgesV1DTO {
	this := ParticipantBadgesV1DTO{}
	this.Badges = badges
	return &this
}

// NewParticipantBadgesV1DTOWithDefaults instantiates a new ParticipantBadgesV1DTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewParticipantBadgesV1DTOWithDefaults() *ParticipantBadgesV1DTO {
	this := ParticipantBadgesV1DTO{}
	return &this
}

// GetBadges returns the Badges field value
func (o *ParticipantBadgesV1DTO) GetBadges() []ParticipantBadgeV1DTO {
	if o == nil {
		var ret []ParticipantBadgeV1DTO
		return ret
	}

	return o.Badges
}

// GetBadgesOk returns a tuple with the Badges field value
// and a boolean to check if the value has been set.
func (o *ParticipantBadgesV1DTO) GetBadgesOk() ([]ParticipantBadgeV1DTO, bool) {
	if o == nil {
		return nil, false
	}
	return o.Badges, true
}

// SetBadges sets field value
func (o *ParticipantBadgesV1DTO) SetBadges(v []ParticipantBadgeV1DTO) {
	o.Badges = v
}

func (o ParticipantBadgesV1DTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ParticipantBadgesV1DTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["badges"] = o.Badges
	return toSerialize, nil
}

func (o *ParticipantBadgesV1DTO) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"badges",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varParticipantBadgesV1DTO := _ParticipantBadgesV1DTO{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varParticipantBadgesV1DTO)

	if err != nil {
		return err
	}

	*o = ParticipantBadgesV1DTO(varParticipantBadgesV1DTO)

	return err
}

type NullableParticipantBadgesV1DTO struct {
	value *ParticipantBadgesV1DTO
	isSet bool
}

func (v NullableParticipantBadgesV1DTO) Get() *ParticipantBadgesV1DTO {
	return v.value
}

func (v *NullableParticipantBadgesV1DTO) Set(val *ParticipantBadgesV1DTO) {
	v.value = val
	v.isSet = true
}

func (v NullableParticipantBadgesV1DTO) IsSet() bool {
	return v.isSet
}

func (v *NullableParticipantBadgesV1DTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableParticipantBadgesV1DTO(val *ParticipantBadgesV1DTO) *NullableParticipantBadgesV1DTO {
	return &NullableParticipantBadgesV1DTO{value: val, isSet: true}
}

func (v NullableParticipantBadgesV1DTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableParticipantBadgesV1DTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


