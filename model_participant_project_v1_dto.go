/*
School21 OpenAPI Specification

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the ParticipantProjectV1DTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ParticipantProjectV1DTO{}

// ParticipantProjectV1DTO Participant Project
type ParticipantProjectV1DTO struct {
	// Project ID
	Id int64 `json:"id"`
	// Project name
	Title string `json:"title"`
	// Project type
	Type string `json:"type"`
	// Project status
	Status string `json:"status"`
	// Final percentage of completion
	FinalPercentage *int32 `json:"finalPercentage,omitempty"`
	// Date and time of the last completion (UTC)
	CompletionDateTime *time.Time `json:"completionDateTime,omitempty"`
	// Team members of the last attempt
	TeamMembers []TeamMemberV1DTO `json:"teamMembers,omitempty"`
	// ID of the course where the project is located
	CourseId *int64 `json:"courseId,omitempty"`
}

type _ParticipantProjectV1DTO ParticipantProjectV1DTO

// NewParticipantProjectV1DTO instantiates a new ParticipantProjectV1DTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewParticipantProjectV1DTO(id int64, title string, type_ string, status string) *ParticipantProjectV1DTO {
	this := ParticipantProjectV1DTO{}
	this.Id = id
	this.Title = title
	this.Type = type_
	this.Status = status
	return &this
}

// NewParticipantProjectV1DTOWithDefaults instantiates a new ParticipantProjectV1DTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewParticipantProjectV1DTOWithDefaults() *ParticipantProjectV1DTO {
	this := ParticipantProjectV1DTO{}
	return &this
}

// GetId returns the Id field value
func (o *ParticipantProjectV1DTO) GetId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ParticipantProjectV1DTO) GetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ParticipantProjectV1DTO) SetId(v int64) {
	o.Id = v
}

// GetTitle returns the Title field value
func (o *ParticipantProjectV1DTO) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *ParticipantProjectV1DTO) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *ParticipantProjectV1DTO) SetTitle(v string) {
	o.Title = v
}

// GetType returns the Type field value
func (o *ParticipantProjectV1DTO) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ParticipantProjectV1DTO) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ParticipantProjectV1DTO) SetType(v string) {
	o.Type = v
}

// GetStatus returns the Status field value
func (o *ParticipantProjectV1DTO) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *ParticipantProjectV1DTO) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *ParticipantProjectV1DTO) SetStatus(v string) {
	o.Status = v
}

// GetFinalPercentage returns the FinalPercentage field value if set, zero value otherwise.
func (o *ParticipantProjectV1DTO) GetFinalPercentage() int32 {
	if o == nil || IsNil(o.FinalPercentage) {
		var ret int32
		return ret
	}
	return *o.FinalPercentage
}

// GetFinalPercentageOk returns a tuple with the FinalPercentage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParticipantProjectV1DTO) GetFinalPercentageOk() (*int32, bool) {
	if o == nil || IsNil(o.FinalPercentage) {
		return nil, false
	}
	return o.FinalPercentage, true
}

// HasFinalPercentage returns a boolean if a field has been set.
func (o *ParticipantProjectV1DTO) HasFinalPercentage() bool {
	if o != nil && !IsNil(o.FinalPercentage) {
		return true
	}

	return false
}

// SetFinalPercentage gets a reference to the given int32 and assigns it to the FinalPercentage field.
func (o *ParticipantProjectV1DTO) SetFinalPercentage(v int32) {
	o.FinalPercentage = &v
}

// GetCompletionDateTime returns the CompletionDateTime field value if set, zero value otherwise.
func (o *ParticipantProjectV1DTO) GetCompletionDateTime() time.Time {
	if o == nil || IsNil(o.CompletionDateTime) {
		var ret time.Time
		return ret
	}
	return *o.CompletionDateTime
}

// GetCompletionDateTimeOk returns a tuple with the CompletionDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParticipantProjectV1DTO) GetCompletionDateTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CompletionDateTime) {
		return nil, false
	}
	return o.CompletionDateTime, true
}

// HasCompletionDateTime returns a boolean if a field has been set.
func (o *ParticipantProjectV1DTO) HasCompletionDateTime() bool {
	if o != nil && !IsNil(o.CompletionDateTime) {
		return true
	}

	return false
}

// SetCompletionDateTime gets a reference to the given time.Time and assigns it to the CompletionDateTime field.
func (o *ParticipantProjectV1DTO) SetCompletionDateTime(v time.Time) {
	o.CompletionDateTime = &v
}

// GetTeamMembers returns the TeamMembers field value if set, zero value otherwise.
func (o *ParticipantProjectV1DTO) GetTeamMembers() []TeamMemberV1DTO {
	if o == nil || IsNil(o.TeamMembers) {
		var ret []TeamMemberV1DTO
		return ret
	}
	return o.TeamMembers
}

// GetTeamMembersOk returns a tuple with the TeamMembers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParticipantProjectV1DTO) GetTeamMembersOk() ([]TeamMemberV1DTO, bool) {
	if o == nil || IsNil(o.TeamMembers) {
		return nil, false
	}
	return o.TeamMembers, true
}

// HasTeamMembers returns a boolean if a field has been set.
func (o *ParticipantProjectV1DTO) HasTeamMembers() bool {
	if o != nil && !IsNil(o.TeamMembers) {
		return true
	}

	return false
}

// SetTeamMembers gets a reference to the given []TeamMemberV1DTO and assigns it to the TeamMembers field.
func (o *ParticipantProjectV1DTO) SetTeamMembers(v []TeamMemberV1DTO) {
	o.TeamMembers = v
}

// GetCourseId returns the CourseId field value if set, zero value otherwise.
func (o *ParticipantProjectV1DTO) GetCourseId() int64 {
	if o == nil || IsNil(o.CourseId) {
		var ret int64
		return ret
	}
	return *o.CourseId
}

// GetCourseIdOk returns a tuple with the CourseId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParticipantProjectV1DTO) GetCourseIdOk() (*int64, bool) {
	if o == nil || IsNil(o.CourseId) {
		return nil, false
	}
	return o.CourseId, true
}

// HasCourseId returns a boolean if a field has been set.
func (o *ParticipantProjectV1DTO) HasCourseId() bool {
	if o != nil && !IsNil(o.CourseId) {
		return true
	}

	return false
}

// SetCourseId gets a reference to the given int64 and assigns it to the CourseId field.
func (o *ParticipantProjectV1DTO) SetCourseId(v int64) {
	o.CourseId = &v
}

func (o ParticipantProjectV1DTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ParticipantProjectV1DTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["title"] = o.Title
	toSerialize["type"] = o.Type
	toSerialize["status"] = o.Status
	if !IsNil(o.FinalPercentage) {
		toSerialize["finalPercentage"] = o.FinalPercentage
	}
	if !IsNil(o.CompletionDateTime) {
		toSerialize["completionDateTime"] = o.CompletionDateTime
	}
	if !IsNil(o.TeamMembers) {
		toSerialize["teamMembers"] = o.TeamMembers
	}
	if !IsNil(o.CourseId) {
		toSerialize["courseId"] = o.CourseId
	}
	return toSerialize, nil
}

func (o *ParticipantProjectV1DTO) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"title",
		"type",
		"status",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varParticipantProjectV1DTO := _ParticipantProjectV1DTO{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varParticipantProjectV1DTO)

	if err != nil {
		return err
	}

	*o = ParticipantProjectV1DTO(varParticipantProjectV1DTO)

	return err
}

type NullableParticipantProjectV1DTO struct {
	value *ParticipantProjectV1DTO
	isSet bool
}

func (v NullableParticipantProjectV1DTO) Get() *ParticipantProjectV1DTO {
	return v.value
}

func (v *NullableParticipantProjectV1DTO) Set(val *ParticipantProjectV1DTO) {
	v.value = val
	v.isSet = true
}

func (v NullableParticipantProjectV1DTO) IsSet() bool {
	return v.isSet
}

func (v *NullableParticipantProjectV1DTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableParticipantProjectV1DTO(val *ParticipantProjectV1DTO) *NullableParticipantProjectV1DTO {
	return &NullableParticipantProjectV1DTO{value: val, isSet: true}
}

func (v NullableParticipantProjectV1DTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableParticipantProjectV1DTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


