/*
School21 OpenAPI Specification

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ParticipantV1DTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ParticipantV1DTO{}

// ParticipantV1DTO Participant
type ParticipantV1DTO struct {
	// Participant login
	Login string `json:"login"`
	// Participant class name (wave)
	ClassName *string `json:"className,omitempty"`
	// Participant parallel name (edu form)
	ParallelName *string `json:"parallelName,omitempty"`
	// Experience points
	ExpValue int64 `json:"expValue"`
	// Participant level
	Level int32 `json:"level"`
	// Number of experience points to the next level
	ExpToNextLevel int64 `json:"expToNextLevel"`
	Campus ParticipantCampusV1DTO `json:"campus"`
	// Participant status
	Status string `json:"status"`
}

type _ParticipantV1DTO ParticipantV1DTO

// NewParticipantV1DTO instantiates a new ParticipantV1DTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewParticipantV1DTO(login string, expValue int64, level int32, expToNextLevel int64, campus ParticipantCampusV1DTO, status string) *ParticipantV1DTO {
	this := ParticipantV1DTO{}
	this.Login = login
	this.ExpValue = expValue
	this.Level = level
	this.ExpToNextLevel = expToNextLevel
	this.Campus = campus
	this.Status = status
	return &this
}

// NewParticipantV1DTOWithDefaults instantiates a new ParticipantV1DTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewParticipantV1DTOWithDefaults() *ParticipantV1DTO {
	this := ParticipantV1DTO{}
	return &this
}

// GetLogin returns the Login field value
func (o *ParticipantV1DTO) GetLogin() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Login
}

// GetLoginOk returns a tuple with the Login field value
// and a boolean to check if the value has been set.
func (o *ParticipantV1DTO) GetLoginOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Login, true
}

// SetLogin sets field value
func (o *ParticipantV1DTO) SetLogin(v string) {
	o.Login = v
}

// GetClassName returns the ClassName field value if set, zero value otherwise.
func (o *ParticipantV1DTO) GetClassName() string {
	if o == nil || IsNil(o.ClassName) {
		var ret string
		return ret
	}
	return *o.ClassName
}

// GetClassNameOk returns a tuple with the ClassName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParticipantV1DTO) GetClassNameOk() (*string, bool) {
	if o == nil || IsNil(o.ClassName) {
		return nil, false
	}
	return o.ClassName, true
}

// HasClassName returns a boolean if a field has been set.
func (o *ParticipantV1DTO) HasClassName() bool {
	if o != nil && !IsNil(o.ClassName) {
		return true
	}

	return false
}

// SetClassName gets a reference to the given string and assigns it to the ClassName field.
func (o *ParticipantV1DTO) SetClassName(v string) {
	o.ClassName = &v
}

// GetParallelName returns the ParallelName field value if set, zero value otherwise.
func (o *ParticipantV1DTO) GetParallelName() string {
	if o == nil || IsNil(o.ParallelName) {
		var ret string
		return ret
	}
	return *o.ParallelName
}

// GetParallelNameOk returns a tuple with the ParallelName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParticipantV1DTO) GetParallelNameOk() (*string, bool) {
	if o == nil || IsNil(o.ParallelName) {
		return nil, false
	}
	return o.ParallelName, true
}

// HasParallelName returns a boolean if a field has been set.
func (o *ParticipantV1DTO) HasParallelName() bool {
	if o != nil && !IsNil(o.ParallelName) {
		return true
	}

	return false
}

// SetParallelName gets a reference to the given string and assigns it to the ParallelName field.
func (o *ParticipantV1DTO) SetParallelName(v string) {
	o.ParallelName = &v
}

// GetExpValue returns the ExpValue field value
func (o *ParticipantV1DTO) GetExpValue() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.ExpValue
}

// GetExpValueOk returns a tuple with the ExpValue field value
// and a boolean to check if the value has been set.
func (o *ParticipantV1DTO) GetExpValueOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExpValue, true
}

// SetExpValue sets field value
func (o *ParticipantV1DTO) SetExpValue(v int64) {
	o.ExpValue = v
}

// GetLevel returns the Level field value
func (o *ParticipantV1DTO) GetLevel() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Level
}

// GetLevelOk returns a tuple with the Level field value
// and a boolean to check if the value has been set.
func (o *ParticipantV1DTO) GetLevelOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Level, true
}

// SetLevel sets field value
func (o *ParticipantV1DTO) SetLevel(v int32) {
	o.Level = v
}

// GetExpToNextLevel returns the ExpToNextLevel field value
func (o *ParticipantV1DTO) GetExpToNextLevel() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.ExpToNextLevel
}

// GetExpToNextLevelOk returns a tuple with the ExpToNextLevel field value
// and a boolean to check if the value has been set.
func (o *ParticipantV1DTO) GetExpToNextLevelOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExpToNextLevel, true
}

// SetExpToNextLevel sets field value
func (o *ParticipantV1DTO) SetExpToNextLevel(v int64) {
	o.ExpToNextLevel = v
}

// GetCampus returns the Campus field value
func (o *ParticipantV1DTO) GetCampus() ParticipantCampusV1DTO {
	if o == nil {
		var ret ParticipantCampusV1DTO
		return ret
	}

	return o.Campus
}

// GetCampusOk returns a tuple with the Campus field value
// and a boolean to check if the value has been set.
func (o *ParticipantV1DTO) GetCampusOk() (*ParticipantCampusV1DTO, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Campus, true
}

// SetCampus sets field value
func (o *ParticipantV1DTO) SetCampus(v ParticipantCampusV1DTO) {
	o.Campus = v
}

// GetStatus returns the Status field value
func (o *ParticipantV1DTO) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *ParticipantV1DTO) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *ParticipantV1DTO) SetStatus(v string) {
	o.Status = v
}

func (o ParticipantV1DTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ParticipantV1DTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["login"] = o.Login
	if !IsNil(o.ClassName) {
		toSerialize["className"] = o.ClassName
	}
	if !IsNil(o.ParallelName) {
		toSerialize["parallelName"] = o.ParallelName
	}
	toSerialize["expValue"] = o.ExpValue
	toSerialize["level"] = o.Level
	toSerialize["expToNextLevel"] = o.ExpToNextLevel
	toSerialize["campus"] = o.Campus
	toSerialize["status"] = o.Status
	return toSerialize, nil
}

func (o *ParticipantV1DTO) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"login",
		"expValue",
		"level",
		"expToNextLevel",
		"campus",
		"status",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varParticipantV1DTO := _ParticipantV1DTO{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varParticipantV1DTO)

	if err != nil {
		return err
	}

	*o = ParticipantV1DTO(varParticipantV1DTO)

	return err
}

type NullableParticipantV1DTO struct {
	value *ParticipantV1DTO
	isSet bool
}

func (v NullableParticipantV1DTO) Get() *ParticipantV1DTO {
	return v.value
}

func (v *NullableParticipantV1DTO) Set(val *ParticipantV1DTO) {
	v.value = val
	v.isSet = true
}

func (v NullableParticipantV1DTO) IsSet() bool {
	return v.isSet
}

func (v *NullableParticipantV1DTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableParticipantV1DTO(val *ParticipantV1DTO) *NullableParticipantV1DTO {
	return &NullableParticipantV1DTO{value: val, isSet: true}
}

func (v NullableParticipantV1DTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableParticipantV1DTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


