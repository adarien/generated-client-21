/*
School21 OpenAPI Specification

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the ParticipantXpHistoryItemV1DTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ParticipantXpHistoryItemV1DTO{}

// ParticipantXpHistoryItemV1DTO Xp History Item
type ParticipantXpHistoryItemV1DTO struct {
	// XP value
	ExpValue int64 `json:"expValue"`
	// Date and time of XP accrual (UTC)
	AccrualDateTime time.Time `json:"accrualDateTime"`
}

type _ParticipantXpHistoryItemV1DTO ParticipantXpHistoryItemV1DTO

// NewParticipantXpHistoryItemV1DTO instantiates a new ParticipantXpHistoryItemV1DTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewParticipantXpHistoryItemV1DTO(expValue int64, accrualDateTime time.Time) *ParticipantXpHistoryItemV1DTO {
	this := ParticipantXpHistoryItemV1DTO{}
	this.ExpValue = expValue
	this.AccrualDateTime = accrualDateTime
	return &this
}

// NewParticipantXpHistoryItemV1DTOWithDefaults instantiates a new ParticipantXpHistoryItemV1DTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewParticipantXpHistoryItemV1DTOWithDefaults() *ParticipantXpHistoryItemV1DTO {
	this := ParticipantXpHistoryItemV1DTO{}
	return &this
}

// GetExpValue returns the ExpValue field value
func (o *ParticipantXpHistoryItemV1DTO) GetExpValue() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.ExpValue
}

// GetExpValueOk returns a tuple with the ExpValue field value
// and a boolean to check if the value has been set.
func (o *ParticipantXpHistoryItemV1DTO) GetExpValueOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExpValue, true
}

// SetExpValue sets field value
func (o *ParticipantXpHistoryItemV1DTO) SetExpValue(v int64) {
	o.ExpValue = v
}

// GetAccrualDateTime returns the AccrualDateTime field value
func (o *ParticipantXpHistoryItemV1DTO) GetAccrualDateTime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.AccrualDateTime
}

// GetAccrualDateTimeOk returns a tuple with the AccrualDateTime field value
// and a boolean to check if the value has been set.
func (o *ParticipantXpHistoryItemV1DTO) GetAccrualDateTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccrualDateTime, true
}

// SetAccrualDateTime sets field value
func (o *ParticipantXpHistoryItemV1DTO) SetAccrualDateTime(v time.Time) {
	o.AccrualDateTime = v
}

func (o ParticipantXpHistoryItemV1DTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ParticipantXpHistoryItemV1DTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["expValue"] = o.ExpValue
	toSerialize["accrualDateTime"] = o.AccrualDateTime
	return toSerialize, nil
}

func (o *ParticipantXpHistoryItemV1DTO) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"expValue",
		"accrualDateTime",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varParticipantXpHistoryItemV1DTO := _ParticipantXpHistoryItemV1DTO{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varParticipantXpHistoryItemV1DTO)

	if err != nil {
		return err
	}

	*o = ParticipantXpHistoryItemV1DTO(varParticipantXpHistoryItemV1DTO)

	return err
}

type NullableParticipantXpHistoryItemV1DTO struct {
	value *ParticipantXpHistoryItemV1DTO
	isSet bool
}

func (v NullableParticipantXpHistoryItemV1DTO) Get() *ParticipantXpHistoryItemV1DTO {
	return v.value
}

func (v *NullableParticipantXpHistoryItemV1DTO) Set(val *ParticipantXpHistoryItemV1DTO) {
	v.value = val
	v.isSet = true
}

func (v NullableParticipantXpHistoryItemV1DTO) IsSet() bool {
	return v.isSet
}

func (v *NullableParticipantXpHistoryItemV1DTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableParticipantXpHistoryItemV1DTO(val *ParticipantXpHistoryItemV1DTO) *NullableParticipantXpHistoryItemV1DTO {
	return &NullableParticipantXpHistoryItemV1DTO{value: val, isSet: true}
}

func (v NullableParticipantXpHistoryItemV1DTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableParticipantXpHistoryItemV1DTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


