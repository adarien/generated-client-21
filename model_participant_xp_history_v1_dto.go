/*
School21 OpenAPI Specification

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ParticipantXpHistoryV1DTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ParticipantXpHistoryV1DTO{}

// ParticipantXpHistoryV1DTO Xp History
type ParticipantXpHistoryV1DTO struct {
	// Array of xp history items
	ExpHistory []ParticipantXpHistoryItemV1DTO `json:"expHistory"`
}

type _ParticipantXpHistoryV1DTO ParticipantXpHistoryV1DTO

// NewParticipantXpHistoryV1DTO instantiates a new ParticipantXpHistoryV1DTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewParticipantXpHistoryV1DTO(expHistory []ParticipantXpHistoryItemV1DTO) *ParticipantXpHistoryV1DTO {
	this := ParticipantXpHistoryV1DTO{}
	this.ExpHistory = expHistory
	return &this
}

// NewParticipantXpHistoryV1DTOWithDefaults instantiates a new ParticipantXpHistoryV1DTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewParticipantXpHistoryV1DTOWithDefaults() *ParticipantXpHistoryV1DTO {
	this := ParticipantXpHistoryV1DTO{}
	return &this
}

// GetExpHistory returns the ExpHistory field value
func (o *ParticipantXpHistoryV1DTO) GetExpHistory() []ParticipantXpHistoryItemV1DTO {
	if o == nil {
		var ret []ParticipantXpHistoryItemV1DTO
		return ret
	}

	return o.ExpHistory
}

// GetExpHistoryOk returns a tuple with the ExpHistory field value
// and a boolean to check if the value has been set.
func (o *ParticipantXpHistoryV1DTO) GetExpHistoryOk() ([]ParticipantXpHistoryItemV1DTO, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExpHistory, true
}

// SetExpHistory sets field value
func (o *ParticipantXpHistoryV1DTO) SetExpHistory(v []ParticipantXpHistoryItemV1DTO) {
	o.ExpHistory = v
}

func (o ParticipantXpHistoryV1DTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ParticipantXpHistoryV1DTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["expHistory"] = o.ExpHistory
	return toSerialize, nil
}

func (o *ParticipantXpHistoryV1DTO) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"expHistory",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varParticipantXpHistoryV1DTO := _ParticipantXpHistoryV1DTO{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varParticipantXpHistoryV1DTO)

	if err != nil {
		return err
	}

	*o = ParticipantXpHistoryV1DTO(varParticipantXpHistoryV1DTO)

	return err
}

type NullableParticipantXpHistoryV1DTO struct {
	value *ParticipantXpHistoryV1DTO
	isSet bool
}

func (v NullableParticipantXpHistoryV1DTO) Get() *ParticipantXpHistoryV1DTO {
	return v.value
}

func (v *NullableParticipantXpHistoryV1DTO) Set(val *ParticipantXpHistoryV1DTO) {
	v.value = val
	v.isSet = true
}

func (v NullableParticipantXpHistoryV1DTO) IsSet() bool {
	return v.isSet
}

func (v *NullableParticipantXpHistoryV1DTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableParticipantXpHistoryV1DTO(val *ParticipantXpHistoryV1DTO) *NullableParticipantXpHistoryV1DTO {
	return &NullableParticipantXpHistoryV1DTO{value: val, isSet: true}
}

func (v NullableParticipantXpHistoryV1DTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableParticipantXpHistoryV1DTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


