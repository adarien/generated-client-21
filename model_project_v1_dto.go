/*
School21 OpenAPI Specification

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ProjectV1DTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProjectV1DTO{}

// ProjectV1DTO Project
type ProjectV1DTO struct {
	// Project ID
	ProjectId int64 `json:"projectId"`
	// Project name
	Title string `json:"title"`
	// Project description
	Description string `json:"description"`
	// Project duration (in hours)
	DurationHours int32 `json:"durationHours"`
	// XP per Project
	Xp *int32 `json:"xp,omitempty"`
	// Project type
	Type string `json:"type"`
	// Array of condition group objects
	StartConditions []ConditionRuleGroupV1DTO `json:"startConditions,omitempty"`
	// Course ID
	CourseId *int64 `json:"courseId,omitempty"`
}

type _ProjectV1DTO ProjectV1DTO

// NewProjectV1DTO instantiates a new ProjectV1DTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProjectV1DTO(projectId int64, title string, description string, durationHours int32, type_ string) *ProjectV1DTO {
	this := ProjectV1DTO{}
	this.ProjectId = projectId
	this.Title = title
	this.Description = description
	this.DurationHours = durationHours
	this.Type = type_
	return &this
}

// NewProjectV1DTOWithDefaults instantiates a new ProjectV1DTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectV1DTOWithDefaults() *ProjectV1DTO {
	this := ProjectV1DTO{}
	return &this
}

// GetProjectId returns the ProjectId field value
func (o *ProjectV1DTO) GetProjectId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value
// and a boolean to check if the value has been set.
func (o *ProjectV1DTO) GetProjectIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProjectId, true
}

// SetProjectId sets field value
func (o *ProjectV1DTO) SetProjectId(v int64) {
	o.ProjectId = v
}

// GetTitle returns the Title field value
func (o *ProjectV1DTO) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *ProjectV1DTO) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *ProjectV1DTO) SetTitle(v string) {
	o.Title = v
}

// GetDescription returns the Description field value
func (o *ProjectV1DTO) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *ProjectV1DTO) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *ProjectV1DTO) SetDescription(v string) {
	o.Description = v
}

// GetDurationHours returns the DurationHours field value
func (o *ProjectV1DTO) GetDurationHours() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.DurationHours
}

// GetDurationHoursOk returns a tuple with the DurationHours field value
// and a boolean to check if the value has been set.
func (o *ProjectV1DTO) GetDurationHoursOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DurationHours, true
}

// SetDurationHours sets field value
func (o *ProjectV1DTO) SetDurationHours(v int32) {
	o.DurationHours = v
}

// GetXp returns the Xp field value if set, zero value otherwise.
func (o *ProjectV1DTO) GetXp() int32 {
	if o == nil || IsNil(o.Xp) {
		var ret int32
		return ret
	}
	return *o.Xp
}

// GetXpOk returns a tuple with the Xp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectV1DTO) GetXpOk() (*int32, bool) {
	if o == nil || IsNil(o.Xp) {
		return nil, false
	}
	return o.Xp, true
}

// HasXp returns a boolean if a field has been set.
func (o *ProjectV1DTO) HasXp() bool {
	if o != nil && !IsNil(o.Xp) {
		return true
	}

	return false
}

// SetXp gets a reference to the given int32 and assigns it to the Xp field.
func (o *ProjectV1DTO) SetXp(v int32) {
	o.Xp = &v
}

// GetType returns the Type field value
func (o *ProjectV1DTO) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ProjectV1DTO) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ProjectV1DTO) SetType(v string) {
	o.Type = v
}

// GetStartConditions returns the StartConditions field value if set, zero value otherwise.
func (o *ProjectV1DTO) GetStartConditions() []ConditionRuleGroupV1DTO {
	if o == nil || IsNil(o.StartConditions) {
		var ret []ConditionRuleGroupV1DTO
		return ret
	}
	return o.StartConditions
}

// GetStartConditionsOk returns a tuple with the StartConditions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectV1DTO) GetStartConditionsOk() ([]ConditionRuleGroupV1DTO, bool) {
	if o == nil || IsNil(o.StartConditions) {
		return nil, false
	}
	return o.StartConditions, true
}

// HasStartConditions returns a boolean if a field has been set.
func (o *ProjectV1DTO) HasStartConditions() bool {
	if o != nil && !IsNil(o.StartConditions) {
		return true
	}

	return false
}

// SetStartConditions gets a reference to the given []ConditionRuleGroupV1DTO and assigns it to the StartConditions field.
func (o *ProjectV1DTO) SetStartConditions(v []ConditionRuleGroupV1DTO) {
	o.StartConditions = v
}

// GetCourseId returns the CourseId field value if set, zero value otherwise.
func (o *ProjectV1DTO) GetCourseId() int64 {
	if o == nil || IsNil(o.CourseId) {
		var ret int64
		return ret
	}
	return *o.CourseId
}

// GetCourseIdOk returns a tuple with the CourseId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectV1DTO) GetCourseIdOk() (*int64, bool) {
	if o == nil || IsNil(o.CourseId) {
		return nil, false
	}
	return o.CourseId, true
}

// HasCourseId returns a boolean if a field has been set.
func (o *ProjectV1DTO) HasCourseId() bool {
	if o != nil && !IsNil(o.CourseId) {
		return true
	}

	return false
}

// SetCourseId gets a reference to the given int64 and assigns it to the CourseId field.
func (o *ProjectV1DTO) SetCourseId(v int64) {
	o.CourseId = &v
}

func (o ProjectV1DTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProjectV1DTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["projectId"] = o.ProjectId
	toSerialize["title"] = o.Title
	toSerialize["description"] = o.Description
	toSerialize["durationHours"] = o.DurationHours
	if !IsNil(o.Xp) {
		toSerialize["xp"] = o.Xp
	}
	toSerialize["type"] = o.Type
	if !IsNil(o.StartConditions) {
		toSerialize["startConditions"] = o.StartConditions
	}
	if !IsNil(o.CourseId) {
		toSerialize["courseId"] = o.CourseId
	}
	return toSerialize, nil
}

func (o *ProjectV1DTO) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"projectId",
		"title",
		"description",
		"durationHours",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varProjectV1DTO := _ProjectV1DTO{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varProjectV1DTO)

	if err != nil {
		return err
	}

	*o = ProjectV1DTO(varProjectV1DTO)

	return err
}

type NullableProjectV1DTO struct {
	value *ProjectV1DTO
	isSet bool
}

func (v NullableProjectV1DTO) Get() *ProjectV1DTO {
	return v.value
}

func (v *NullableProjectV1DTO) Set(val *ProjectV1DTO) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectV1DTO) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectV1DTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectV1DTO(val *ProjectV1DTO) *NullableProjectV1DTO {
	return &NullableProjectV1DTO{value: val, isSet: true}
}

func (v NullableProjectV1DTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectV1DTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


