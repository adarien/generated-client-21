/*
School21 OpenAPI Specification

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the SaleV1DTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SaleV1DTO{}

// SaleV1DTO Sale
type SaleV1DTO struct {
	// Type of review points
	Type string `json:"type"`
	// Sale status
	Status string `json:"status"`
	// Date and time of the sale start (UTC)
	StartDateTime *time.Time `json:"startDateTime,omitempty"`
	// Percentage of sale progress
	ProgressPercentage *int32 `json:"progressPercentage,omitempty"`
}

type _SaleV1DTO SaleV1DTO

// NewSaleV1DTO instantiates a new SaleV1DTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSaleV1DTO(type_ string, status string) *SaleV1DTO {
	this := SaleV1DTO{}
	this.Type = type_
	this.Status = status
	return &this
}

// NewSaleV1DTOWithDefaults instantiates a new SaleV1DTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSaleV1DTOWithDefaults() *SaleV1DTO {
	this := SaleV1DTO{}
	return &this
}

// GetType returns the Type field value
func (o *SaleV1DTO) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *SaleV1DTO) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *SaleV1DTO) SetType(v string) {
	o.Type = v
}

// GetStatus returns the Status field value
func (o *SaleV1DTO) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *SaleV1DTO) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *SaleV1DTO) SetStatus(v string) {
	o.Status = v
}

// GetStartDateTime returns the StartDateTime field value if set, zero value otherwise.
func (o *SaleV1DTO) GetStartDateTime() time.Time {
	if o == nil || IsNil(o.StartDateTime) {
		var ret time.Time
		return ret
	}
	return *o.StartDateTime
}

// GetStartDateTimeOk returns a tuple with the StartDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SaleV1DTO) GetStartDateTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.StartDateTime) {
		return nil, false
	}
	return o.StartDateTime, true
}

// HasStartDateTime returns a boolean if a field has been set.
func (o *SaleV1DTO) HasStartDateTime() bool {
	if o != nil && !IsNil(o.StartDateTime) {
		return true
	}

	return false
}

// SetStartDateTime gets a reference to the given time.Time and assigns it to the StartDateTime field.
func (o *SaleV1DTO) SetStartDateTime(v time.Time) {
	o.StartDateTime = &v
}

// GetProgressPercentage returns the ProgressPercentage field value if set, zero value otherwise.
func (o *SaleV1DTO) GetProgressPercentage() int32 {
	if o == nil || IsNil(o.ProgressPercentage) {
		var ret int32
		return ret
	}
	return *o.ProgressPercentage
}

// GetProgressPercentageOk returns a tuple with the ProgressPercentage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SaleV1DTO) GetProgressPercentageOk() (*int32, bool) {
	if o == nil || IsNil(o.ProgressPercentage) {
		return nil, false
	}
	return o.ProgressPercentage, true
}

// HasProgressPercentage returns a boolean if a field has been set.
func (o *SaleV1DTO) HasProgressPercentage() bool {
	if o != nil && !IsNil(o.ProgressPercentage) {
		return true
	}

	return false
}

// SetProgressPercentage gets a reference to the given int32 and assigns it to the ProgressPercentage field.
func (o *SaleV1DTO) SetProgressPercentage(v int32) {
	o.ProgressPercentage = &v
}

func (o SaleV1DTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SaleV1DTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["status"] = o.Status
	if !IsNil(o.StartDateTime) {
		toSerialize["startDateTime"] = o.StartDateTime
	}
	if !IsNil(o.ProgressPercentage) {
		toSerialize["progressPercentage"] = o.ProgressPercentage
	}
	return toSerialize, nil
}

func (o *SaleV1DTO) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"status",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSaleV1DTO := _SaleV1DTO{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSaleV1DTO)

	if err != nil {
		return err
	}

	*o = SaleV1DTO(varSaleV1DTO)

	return err
}

type NullableSaleV1DTO struct {
	value *SaleV1DTO
	isSet bool
}

func (v NullableSaleV1DTO) Get() *SaleV1DTO {
	return v.value
}

func (v *NullableSaleV1DTO) Set(val *SaleV1DTO) {
	v.value = val
	v.isSet = true
}

func (v NullableSaleV1DTO) IsSet() bool {
	return v.isSet
}

func (v *NullableSaleV1DTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSaleV1DTO(val *SaleV1DTO) *NullableSaleV1DTO {
	return &NullableSaleV1DTO{value: val, isSet: true}
}

func (v NullableSaleV1DTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSaleV1DTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


