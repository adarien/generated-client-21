/*
School21 OpenAPI Specification

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SalesV1DTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SalesV1DTO{}

// SalesV1DTO Sales
type SalesV1DTO struct {
	// Array of sales data
	Sales []SaleV1DTO `json:"sales"`
}

type _SalesV1DTO SalesV1DTO

// NewSalesV1DTO instantiates a new SalesV1DTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSalesV1DTO(sales []SaleV1DTO) *SalesV1DTO {
	this := SalesV1DTO{}
	this.Sales = sales
	return &this
}

// NewSalesV1DTOWithDefaults instantiates a new SalesV1DTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSalesV1DTOWithDefaults() *SalesV1DTO {
	this := SalesV1DTO{}
	return &this
}

// GetSales returns the Sales field value
func (o *SalesV1DTO) GetSales() []SaleV1DTO {
	if o == nil {
		var ret []SaleV1DTO
		return ret
	}

	return o.Sales
}

// GetSalesOk returns a tuple with the Sales field value
// and a boolean to check if the value has been set.
func (o *SalesV1DTO) GetSalesOk() ([]SaleV1DTO, bool) {
	if o == nil {
		return nil, false
	}
	return o.Sales, true
}

// SetSales sets field value
func (o *SalesV1DTO) SetSales(v []SaleV1DTO) {
	o.Sales = v
}

func (o SalesV1DTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SalesV1DTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["sales"] = o.Sales
	return toSerialize, nil
}

func (o *SalesV1DTO) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"sales",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSalesV1DTO := _SalesV1DTO{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSalesV1DTO)

	if err != nil {
		return err
	}

	*o = SalesV1DTO(varSalesV1DTO)

	return err
}

type NullableSalesV1DTO struct {
	value *SalesV1DTO
	isSet bool
}

func (v NullableSalesV1DTO) Get() *SalesV1DTO {
	return v.value
}

func (v *NullableSalesV1DTO) Set(val *SalesV1DTO) {
	v.value = val
	v.isSet = true
}

func (v NullableSalesV1DTO) IsSet() bool {
	return v.isSet
}

func (v *NullableSalesV1DTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSalesV1DTO(val *SalesV1DTO) *NullableSalesV1DTO {
	return &NullableSalesV1DTO{value: val, isSet: true}
}

func (v NullableSalesV1DTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSalesV1DTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


