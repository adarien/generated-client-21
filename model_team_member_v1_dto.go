/*
School21 OpenAPI Specification

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TeamMemberV1DTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TeamMemberV1DTO{}

// TeamMemberV1DTO Team Member
type TeamMemberV1DTO struct {
	// Team member login
	Login string `json:"login"`
	// Team member role
	IsTeamlead bool `json:"isTeamlead"`
}

type _TeamMemberV1DTO TeamMemberV1DTO

// NewTeamMemberV1DTO instantiates a new TeamMemberV1DTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTeamMemberV1DTO(login string, isTeamlead bool) *TeamMemberV1DTO {
	this := TeamMemberV1DTO{}
	this.Login = login
	this.IsTeamlead = isTeamlead
	return &this
}

// NewTeamMemberV1DTOWithDefaults instantiates a new TeamMemberV1DTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTeamMemberV1DTOWithDefaults() *TeamMemberV1DTO {
	this := TeamMemberV1DTO{}
	return &this
}

// GetLogin returns the Login field value
func (o *TeamMemberV1DTO) GetLogin() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Login
}

// GetLoginOk returns a tuple with the Login field value
// and a boolean to check if the value has been set.
func (o *TeamMemberV1DTO) GetLoginOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Login, true
}

// SetLogin sets field value
func (o *TeamMemberV1DTO) SetLogin(v string) {
	o.Login = v
}

// GetIsTeamlead returns the IsTeamlead field value
func (o *TeamMemberV1DTO) GetIsTeamlead() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsTeamlead
}

// GetIsTeamleadOk returns a tuple with the IsTeamlead field value
// and a boolean to check if the value has been set.
func (o *TeamMemberV1DTO) GetIsTeamleadOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsTeamlead, true
}

// SetIsTeamlead sets field value
func (o *TeamMemberV1DTO) SetIsTeamlead(v bool) {
	o.IsTeamlead = v
}

func (o TeamMemberV1DTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TeamMemberV1DTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["login"] = o.Login
	toSerialize["isTeamlead"] = o.IsTeamlead
	return toSerialize, nil
}

func (o *TeamMemberV1DTO) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"login",
		"isTeamlead",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTeamMemberV1DTO := _TeamMemberV1DTO{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTeamMemberV1DTO)

	if err != nil {
		return err
	}

	*o = TeamMemberV1DTO(varTeamMemberV1DTO)

	return err
}

type NullableTeamMemberV1DTO struct {
	value *TeamMemberV1DTO
	isSet bool
}

func (v NullableTeamMemberV1DTO) Get() *TeamMemberV1DTO {
	return v.value
}

func (v *NullableTeamMemberV1DTO) Set(val *TeamMemberV1DTO) {
	v.value = val
	v.isSet = true
}

func (v NullableTeamMemberV1DTO) IsSet() bool {
	return v.isSet
}

func (v *NullableTeamMemberV1DTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTeamMemberV1DTO(val *TeamMemberV1DTO) *NullableTeamMemberV1DTO {
	return &NullableTeamMemberV1DTO{value: val, isSet: true}
}

func (v NullableTeamMemberV1DTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTeamMemberV1DTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


