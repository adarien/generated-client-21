/*
School21 OpenAPI Specification

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the WorkplaceV1DTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WorkplaceV1DTO{}

// WorkplaceV1DTO Workplace
type WorkplaceV1DTO struct {
	// Row of a workplace
	Row string `json:"row"`
	// Number of a workplace
	Number int32 `json:"number"`
	// Login of the participant occupying the place
	Login *string `json:"login,omitempty"`
}

type _WorkplaceV1DTO WorkplaceV1DTO

// NewWorkplaceV1DTO instantiates a new WorkplaceV1DTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWorkplaceV1DTO(row string, number int32) *WorkplaceV1DTO {
	this := WorkplaceV1DTO{}
	this.Row = row
	this.Number = number
	return &this
}

// NewWorkplaceV1DTOWithDefaults instantiates a new WorkplaceV1DTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWorkplaceV1DTOWithDefaults() *WorkplaceV1DTO {
	this := WorkplaceV1DTO{}
	return &this
}

// GetRow returns the Row field value
func (o *WorkplaceV1DTO) GetRow() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Row
}

// GetRowOk returns a tuple with the Row field value
// and a boolean to check if the value has been set.
func (o *WorkplaceV1DTO) GetRowOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Row, true
}

// SetRow sets field value
func (o *WorkplaceV1DTO) SetRow(v string) {
	o.Row = v
}

// GetNumber returns the Number field value
func (o *WorkplaceV1DTO) GetNumber() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Number
}

// GetNumberOk returns a tuple with the Number field value
// and a boolean to check if the value has been set.
func (o *WorkplaceV1DTO) GetNumberOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Number, true
}

// SetNumber sets field value
func (o *WorkplaceV1DTO) SetNumber(v int32) {
	o.Number = v
}

// GetLogin returns the Login field value if set, zero value otherwise.
func (o *WorkplaceV1DTO) GetLogin() string {
	if o == nil || IsNil(o.Login) {
		var ret string
		return ret
	}
	return *o.Login
}

// GetLoginOk returns a tuple with the Login field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkplaceV1DTO) GetLoginOk() (*string, bool) {
	if o == nil || IsNil(o.Login) {
		return nil, false
	}
	return o.Login, true
}

// HasLogin returns a boolean if a field has been set.
func (o *WorkplaceV1DTO) HasLogin() bool {
	if o != nil && !IsNil(o.Login) {
		return true
	}

	return false
}

// SetLogin gets a reference to the given string and assigns it to the Login field.
func (o *WorkplaceV1DTO) SetLogin(v string) {
	o.Login = &v
}

func (o WorkplaceV1DTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WorkplaceV1DTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["row"] = o.Row
	toSerialize["number"] = o.Number
	if !IsNil(o.Login) {
		toSerialize["login"] = o.Login
	}
	return toSerialize, nil
}

func (o *WorkplaceV1DTO) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"row",
		"number",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varWorkplaceV1DTO := _WorkplaceV1DTO{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varWorkplaceV1DTO)

	if err != nil {
		return err
	}

	*o = WorkplaceV1DTO(varWorkplaceV1DTO)

	return err
}

type NullableWorkplaceV1DTO struct {
	value *WorkplaceV1DTO
	isSet bool
}

func (v NullableWorkplaceV1DTO) Get() *WorkplaceV1DTO {
	return v.value
}

func (v *NullableWorkplaceV1DTO) Set(val *WorkplaceV1DTO) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkplaceV1DTO) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkplaceV1DTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkplaceV1DTO(val *WorkplaceV1DTO) *NullableWorkplaceV1DTO {
	return &NullableWorkplaceV1DTO{value: val, isSet: true}
}

func (v NullableWorkplaceV1DTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkplaceV1DTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


