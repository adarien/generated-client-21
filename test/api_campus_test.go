/*
School21 OpenAPI Specification

Testing CampusAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/adarien/generated-client-21"
)

func Test_openapi_CampusAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test CampusAPIService GetCampuses", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CampusAPI.GetCampuses(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CampusAPIService GetClustersByCampus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var campusId string

		resp, httpRes, err := apiClient.CampusAPI.GetClustersByCampus(context.Background(), campusId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CampusAPIService GetCoalitionsByCampus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var campusId string

		resp, httpRes, err := apiClient.CampusAPI.GetCoalitionsByCampus(context.Background(), campusId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CampusAPIService GetParticipantsByCampusId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var campusId string

		resp, httpRes, err := apiClient.CampusAPI.GetParticipantsByCampusId(context.Background(), campusId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
