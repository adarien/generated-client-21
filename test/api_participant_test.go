/*
School21 OpenAPI Specification

Testing ParticipantAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/adarien/generated-client-21"
)

func Test_openapi_ParticipantAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ParticipantAPIService GetBadgesByLogin", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var login string

		resp, httpRes, err := apiClient.ParticipantAPI.GetBadgesByLogin(context.Background(), login).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ParticipantAPIService GetCoalitionByLogin", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var login string

		resp, httpRes, err := apiClient.ParticipantAPI.GetCoalitionByLogin(context.Background(), login).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ParticipantAPIService GetLogWeeklyAvgHoursByLoginAndDate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var login string

		resp, httpRes, err := apiClient.ParticipantAPI.GetLogWeeklyAvgHoursByLoginAndDate(context.Background(), login).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ParticipantAPIService GetParticipantByLogin", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var login string

		resp, httpRes, err := apiClient.ParticipantAPI.GetParticipantByLogin(context.Background(), login).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ParticipantAPIService GetParticipantCourseByLoginAndCourseId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var login string
		var courseId int64

		resp, httpRes, err := apiClient.ParticipantAPI.GetParticipantCourseByLoginAndCourseId(context.Background(), login, courseId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ParticipantAPIService GetParticipantCoursesByLogin", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var login string

		resp, httpRes, err := apiClient.ParticipantAPI.GetParticipantCoursesByLogin(context.Background(), login).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ParticipantAPIService GetParticipantFeedbackByLogin", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var login string

		resp, httpRes, err := apiClient.ParticipantAPI.GetParticipantFeedbackByLogin(context.Background(), login).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ParticipantAPIService GetParticipantProjectByLoginAndProjectId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var login string
		var projectId int64

		resp, httpRes, err := apiClient.ParticipantAPI.GetParticipantProjectByLoginAndProjectId(context.Background(), login, projectId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ParticipantAPIService GetParticipantProjectsByLogin", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var login string

		resp, httpRes, err := apiClient.ParticipantAPI.GetParticipantProjectsByLogin(context.Background(), login).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ParticipantAPIService GetParticipantWorkstationByLogin", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var login string

		resp, httpRes, err := apiClient.ParticipantAPI.GetParticipantWorkstationByLogin(context.Background(), login).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ParticipantAPIService GetPointsByLogin", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var login string

		resp, httpRes, err := apiClient.ParticipantAPI.GetPointsByLogin(context.Background(), login).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ParticipantAPIService GetSoftSkillByLogin", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var login string

		resp, httpRes, err := apiClient.ParticipantAPI.GetSoftSkillByLogin(context.Background(), login).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ParticipantAPIService GetXpHistoryByLogin", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var login string

		resp, httpRes, err := apiClient.ParticipantAPI.GetXpHistoryByLogin(context.Background(), login).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
